// HmDeepLLangTranslator.mac v1.2.1.5
// Copyright (c) 2023-2024 Akitsugu Komiyama
// under the MIT License

hidemaruversion "9.25.99";

jsmode @"WebView2\HmDeepLLangTranslatorJS";

js {



// ご自身で環境変数「DEEPL_SCRIPT_TRANSLATION」にDeepLのAPIのAUTH_KEYを設定してください。
let auth_key = getenv("DEEPL_SCRIPT_TRANSLATION");

// 環境変数への登録が面倒、あるいは避けたいという場合は、下部へと直接認証キーの文字列を貼り付けること。
// let auth_key = "*******-****-****-****-************:**";

// 翻訳対象のテキスト
let text = hidemaru.getSelectedText() || hidemaru.getTotalText();

// 有料版の人は https://api.deepl.com/v2/translate と書き換えると無料の制限が無くなる
let endpoint_url = "https://api-free.deepl.com/v2/translate";

let source_lang = getarg(0);
let target_lang = getarg(1);

if(!source_lang && !target_lang) {
    writeLineOutputPane(
        "「翻訳元の言語」も「翻訳先の言語」も両方が指定されていません。\r\n" +
        "「HmDeepLLangTranslator.mac」を直接実行していませんか？\r\n" + 
        "「HmDeepLLangTranslator.mac」は直接実行する対象ではなく、「別のマクロから引数を付けて」呼び出すものです。\r\n"
    );
}

const params = new URLSearchParams({
    auth_key,
    text,
    source_lang,
    target_lang
});

// マクロ実行から翻訳結果が返ってくるまでの間に時間的なずれがあり、その間編集ペインはフリーであるため、選択中だったかを記憶しておく
// これにより翻訳マクロを実行した直後、まだ翻訳結果が返っていていないのにカーソルを動作させても良い形となり、ストレスがかなり軽減できる
const [is_last_selecting, n_seltopcolumn, n_selendcolumn, n_selendlineno, n_linelen2] = [selecting(), seltopcolumn(), selendcolumn(), selendlineno(), linelen2()];

var translate_obj = {};
function getAnswerText() {
    try {
        // エラーが出る可能性があるため、先頭でローカルに代入してみる
        let answer = translate_obj["translations"][0]["text"];
        return answer
    } catch (error) {
        if (translate_obj.message != null) {
            writeLineOutputPane("翻訳エラー:" + translate_obj.message);
        } else {
            writeLineOutputPane("翻訳エラー:" + error);
        }
    } finally {
        translate_obj = {};
    }
}

// 最後の表示用。出力の場所ややり方変えたければ、この関数を編集のこと。
function printTranslateText() {
    let answer = getAnswerText();

    if (answer == null) {
        return;
    }

    try {
        begingroupundo();

        escapeselect();

        // 選択中なら選択を解除して、選択位置の最後の座標に移動
        if (is_last_selecting) {
            moveto2(n_selendcolumn, n_selendlineno); // 選択してたら解除しつつも選択範囲の最後尾に。解除してからでも最後の選択位置を元にするから大丈夫。
            // 全体を選択していたならば...
            if (text == hidemaru.getTotalText()) {
                // 何も選択していない時と同じ処理
                if (column() != 0) {
                    insertreturn();
                }
            }

            // 行末まで選択することで、カーソルが先頭にある。
            else if (n_selendcolumn == 0) {
                // 最後に改行がなければ改行を付ける
                answer = answer.endsWith("\n") ? answer : `${answer}\n`;
            }

            // 文頭から文末まで選択することで行選択相当になっている。
            else if (n_seltopcolumn == 0 && n_selendcolumn == n_linelen2) {
                // 文頭に最後改行が無いので、先頭に改行を入れる
                // 文末の改行は選択している最後が改行を含むか含まないかでそのままにしておけば辻褄が合う
                answer = `\n${answer}`;
            }
        }
        // 選択中でないなら、文末に追加
        else {
            gofileend(); // 最後尾に

            // 移動した結果、カラム位置が「行の先頭」でないなら１つ改行入れて行の先頭へ
            if (column() != 0) {
                insertreturn();
            }
        }

        insert(answer);

        endgroupundo();

    } catch (error) {
        writeLineOutputPane("翻訳エラー:" + error);
    } finally {
        translate_obj = {};
    }
}

function requestTranslate(params) {
    fetch(endpoint_url, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
        },
        body: String(params),
    })
        .then(response => response.json())
        .then(json_data => recieveFetchReply(json_data))
        .catch(error => writeLineOutputPane('通信エラー:' + error));

}

async function recieveFetchReply(data) {
    try {
        translate_obj = data;

        let peRetry = hidemaru.setInterval(() => {

            // マクロ実行中ならばちょっとまつ、
            if (hidemaru.isMacroExecuting()) return; // 再挑戦

            let isScheduled = hidemaru.postExecMacroMemory("js{ printTranslateText(); }");
            if (isScheduled === 0) return; // 再挑戦。postExecMacroMemoryの新旧仕様の揺れのため、「===」が必須。

            hidemaru.clearInterval(peRetry);
        }, 100);

    } catch (error) {
        writeLineOutputPane("翻訳エラー:" + error);
    }
}

// エラーなどをアプトプット枠に表示する用途
function writeLineOutputPane(msg) {
    let dll = loaddll("HmOutputPane.dll");
    dll.dllFuncW.OutputW(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
}

requestTranslate(params);



} // js
